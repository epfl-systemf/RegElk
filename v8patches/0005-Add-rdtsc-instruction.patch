From be55800c3bcc4d8b9a07397c26f29a9e62159c00 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Cl=C3=A9ment=20Pit-Claudel?= <clement.pit-claudel@epfl.ch>
Date: Fri, 13 Oct 2023 18:32:25 +0200
Subject: [PATCH 1/2] Add rdtsc instruction

---
 rdtsc.test.js | 18 ++++++++++++++++++
 src/d8/d8.cc  | 14 ++++++++++++++
 src/d8/d8.h   |  2 ++
 3 files changed, 34 insertions(+)
 create mode 100644 rdtsc.test.js

diff --git a/rdtsc.test.js b/rdtsc.test.js
new file mode 100644
index 00000000000..56c9ed9c3c7
--- /dev/null
+++ b/rdtsc.test.js
@@ -0,0 +1,18 @@
+function testrdtsc(total_times, time_s) {
+    const start = performance.rdtsc();
+
+    for (let i = 0; i <= 500*time_s*1000*1000; i++) {
+
+    }
+
+    // setTimeout(() => {
+    let freq = (performance.rdtsc() - start) / time_s;
+    total_times[time_s] = freq;
+    console.log(freq)
+    // }, time_s * 1000);
+}
+
+total_times = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
+for (let time_s = 1; time_s <= 10; time_s++) {
+    testrdtsc(total_times, 1);
+}
diff --git a/src/d8/d8.cc b/src/d8/d8.cc
index 072f9b276dc..41e88617151 100644
--- a/src/d8/d8.cc
+++ b/src/d8/d8.cc
@@ -18,6 +18,8 @@
 #include <utility>
 #include <vector>
 
+#include <x86intrin.h>
+
 #ifdef ENABLE_VTUNE_JIT_INTERFACE
 #include "src/third_party/vtune/v8-vtune.h"
 #endif
@@ -1754,6 +1756,11 @@ double Shell::GetTimestamp() {
     return delta.InMillisecondsF();
   }
 }
+
+uint64_t Shell::GetRdtsc() {
+  return __rdtsc();
+}
+
 uint64_t Shell::GetTracingTimestampFromPerformanceTimestamp(
     double performance_timestamp) {
   // Don't use this in --verify-predictable mode, predictable timestamps don't
@@ -1773,6 +1780,11 @@ void Shell::PerformanceNow(const v8::FunctionCallbackInfo<v8::Value>& info) {
   info.GetReturnValue().Set(GetTimestamp());
 }
 
+void Shell::PerformanceRdtsc(const v8::FunctionCallbackInfo<v8::Value>& info) {
+  DCHECK(i::ValidateCallbackInfo(info));
+  info.GetReturnValue().Set((double)GetRdtsc());
+}
+
 // performance.mark() records and returns a PerformanceEntry with the current
 // timestamp.
 void Shell::PerformanceMark(const v8::FunctionCallbackInfo<v8::Value>& info) {
@@ -3469,6 +3481,8 @@ Local<ObjectTemplate> Shell::CreatePerformanceTemplate(Isolate* isolate) {
   Local<ObjectTemplate> performance_template = ObjectTemplate::New(isolate);
   performance_template->Set(isolate, "now",
                             FunctionTemplate::New(isolate, PerformanceNow));
+  performance_template->Set(isolate, "rdtsc",
+                            FunctionTemplate::New(isolate, PerformanceRdtsc));
   performance_template->Set(isolate, "mark",
                             FunctionTemplate::New(isolate, PerformanceMark));
   performance_template->Set(isolate, "measure",
diff --git a/src/d8/d8.h b/src/d8/d8.h
index 411a51e351a..171f5d6d71b 100644
--- a/src/d8/d8.h
+++ b/src/d8/d8.h
@@ -530,10 +530,12 @@ class Shell : public i::AllStatic {
   static void MapCounters(v8::Isolate* isolate, const char* name);
 
   static double GetTimestamp();
+  static uint64_t GetRdtsc();
   static uint64_t GetTracingTimestampFromPerformanceTimestamp(
       double performance_timestamp);
 
   static void PerformanceNow(const v8::FunctionCallbackInfo<v8::Value>& info);
+  static void PerformanceRdtsc(const v8::FunctionCallbackInfo<v8::Value>& info);
   static void PerformanceMark(const v8::FunctionCallbackInfo<v8::Value>& info);
   static void PerformanceMeasure(
       const v8::FunctionCallbackInfo<v8::Value>& info);
-- 
2.34.1

